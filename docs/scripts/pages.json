[{"name":"Adaptive","description":"cc.ekblad.toml.serialization.InlineListMode.Adaptive","location":"4koma/cc.ekblad.toml.serialization/-inline-list-mode/-adaptive/index.html","searchKeys":["Adaptive","Adaptive","cc.ekblad.toml.serialization.InlineListMode.Adaptive"]},{"name":"Inline","description":"cc.ekblad.toml.serialization.CollectionSyntax.Inline","location":"4koma/cc.ekblad.toml.serialization/-collection-syntax/-inline/index.html","searchKeys":["Inline","Inline","cc.ekblad.toml.serialization.CollectionSyntax.Inline"]},{"name":"MultiLine","description":"cc.ekblad.toml.serialization.InlineListMode.MultiLine","location":"4koma/cc.ekblad.toml.serialization/-inline-list-mode/-multi-line/index.html","searchKeys":["MultiLine","MultiLine","cc.ekblad.toml.serialization.InlineListMode.MultiLine"]},{"name":"SingleLine","description":"cc.ekblad.toml.serialization.InlineListMode.SingleLine","location":"4koma/cc.ekblad.toml.serialization/-inline-list-mode/-single-line/index.html","searchKeys":["SingleLine","SingleLine","cc.ekblad.toml.serialization.InlineListMode.SingleLine"]},{"name":"Table","description":"cc.ekblad.toml.serialization.CollectionSyntax.Table","location":"4koma/cc.ekblad.toml.serialization/-collection-syntax/-table/index.html","searchKeys":["Table","Table","cc.ekblad.toml.serialization.CollectionSyntax.Table"]},{"name":"annotation class InternalAPI","description":"cc.ekblad.toml.util.InternalAPI","location":"4koma/cc.ekblad.toml.util/-internal-a-p-i/index.html","searchKeys":["InternalAPI","annotation class InternalAPI","cc.ekblad.toml.util.InternalAPI"]},{"name":"class IllegalListTargetType(tomlList: TomlValue.List, target: KType) : TomlException.DecodingError","description":"cc.ekblad.toml.model.TomlException.DecodingError.IllegalListTargetType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-illegal-list-target-type/index.html","searchKeys":["IllegalListTargetType","class IllegalListTargetType(tomlList: TomlValue.List, target: KType) : TomlException.DecodingError","cc.ekblad.toml.model.TomlException.DecodingError.IllegalListTargetType"]},{"name":"class IllegalMapKeyType(tomlMap: TomlValue.Map, targetMapType: KType) : TomlException.DecodingError","description":"cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapKeyType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-illegal-map-key-type/index.html","searchKeys":["IllegalMapKeyType","class IllegalMapKeyType(tomlMap: TomlValue.Map, targetMapType: KType) : TomlException.DecodingError","cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapKeyType"]},{"name":"class IllegalMapTargetType(tomlMap: TomlValue.Map, target: KType) : TomlException.DecodingError","description":"cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapTargetType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-illegal-map-target-type/index.html","searchKeys":["IllegalMapTargetType","class IllegalMapTargetType(tomlMap: TomlValue.Map, target: KType) : TomlException.DecodingError","cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapTargetType"]},{"name":"class InvalidEnumValue(tomlString: TomlValue.String, val targetType: KType) : TomlException.DecodingError","description":"cc.ekblad.toml.model.TomlException.DecodingError.InvalidEnumValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-invalid-enum-value/index.html","searchKeys":["InvalidEnumValue","class InvalidEnumValue(tomlString: TomlValue.String, val targetType: KType) : TomlException.DecodingError","cc.ekblad.toml.model.TomlException.DecodingError.InvalidEnumValue"]},{"name":"class InvalidString(val sourceValue: String, val invalidChars: Set<Char>) : TomlException.SerializationError","description":"cc.ekblad.toml.model.TomlException.SerializationError.InvalidString","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/-invalid-string/index.html","searchKeys":["InvalidString","class InvalidString(val sourceValue: String, val invalidChars: Set<Char>) : TomlException.SerializationError","cc.ekblad.toml.model.TomlException.SerializationError.InvalidString"]},{"name":"class LazyValueEvaluatedToNull(val sourceValue: Lazy<*>) : TomlException.EncodingError","description":"cc.ekblad.toml.model.TomlException.EncodingError.LazyValueEvaluatedToNull","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/-lazy-value-evaluated-to-null/index.html","searchKeys":["LazyValueEvaluatedToNull","class LazyValueEvaluatedToNull(val sourceValue: Lazy<*>) : TomlException.EncodingError","cc.ekblad.toml.model.TomlException.EncodingError.LazyValueEvaluatedToNull"]},{"name":"class MissingNonNullableValue(val parameter: KParameter, tomlMap: TomlValue.Map, kType: KType) : TomlException.DecodingError","description":"cc.ekblad.toml.model.TomlException.DecodingError.MissingNonNullableValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-missing-non-nullable-value/index.html","searchKeys":["MissingNonNullableValue","class MissingNonNullableValue(val parameter: KParameter, tomlMap: TomlValue.Map, kType: KType) : TomlException.DecodingError","cc.ekblad.toml.model.TomlException.DecodingError.MissingNonNullableValue"]},{"name":"class NoSuchDecoder(val sourceValue: TomlValue, val targetType: KType) : TomlException.DecodingError","description":"cc.ekblad.toml.model.TomlException.DecodingError.NoSuchDecoder","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-no-such-decoder/index.html","searchKeys":["NoSuchDecoder","class NoSuchDecoder(val sourceValue: TomlValue, val targetType: KType) : TomlException.DecodingError","cc.ekblad.toml.model.TomlException.DecodingError.NoSuchDecoder"]},{"name":"class NoSuchEncoder(val sourceValue: Any) : TomlException.EncodingError","description":"cc.ekblad.toml.model.TomlException.EncodingError.NoSuchEncoder","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/-no-such-encoder/index.html","searchKeys":["NoSuchEncoder","class NoSuchEncoder(val sourceValue: Any) : TomlException.EncodingError","cc.ekblad.toml.model.TomlException.EncodingError.NoSuchEncoder"]},{"name":"class NotAMap(val sourceValue: Any, val tomlValue: TomlValue) : TomlException.SerializationError","description":"cc.ekblad.toml.model.TomlException.SerializationError.NotAMap","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/-not-a-map/index.html","searchKeys":["NotAMap","class NotAMap(val sourceValue: Any, val tomlValue: TomlValue) : TomlException.SerializationError","cc.ekblad.toml.model.TomlException.SerializationError.NotAMap"]},{"name":"class TomlDecoder","description":"cc.ekblad.toml.transcoding.TomlDecoder","location":"4koma/cc.ekblad.toml.transcoding/-toml-decoder/index.html","searchKeys":["TomlDecoder","class TomlDecoder","cc.ekblad.toml.transcoding.TomlDecoder"]},{"name":"class TomlEncoder","description":"cc.ekblad.toml.transcoding.TomlEncoder","location":"4koma/cc.ekblad.toml.transcoding/-toml-encoder/index.html","searchKeys":["TomlEncoder","class TomlEncoder","cc.ekblad.toml.transcoding.TomlEncoder"]},{"name":"class TomlMapper","description":"cc.ekblad.toml.TomlMapper","location":"4koma/cc.ekblad.toml/-toml-mapper/index.html","searchKeys":["TomlMapper","class TomlMapper","cc.ekblad.toml.TomlMapper"]},{"name":"class TomlMapperConfigurator","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/index.html","searchKeys":["TomlMapperConfigurator","class TomlMapperConfigurator","cc.ekblad.toml.configuration.TomlMapperConfigurator"]},{"name":"class TomlSerializer","description":"cc.ekblad.toml.TomlSerializer","location":"4koma/cc.ekblad.toml/-toml-serializer/index.html","searchKeys":["TomlSerializer","class TomlSerializer","cc.ekblad.toml.TomlSerializer"]},{"name":"class TomlSerializerConfigurator","description":"cc.ekblad.toml.configuration.TomlSerializerConfigurator","location":"4koma/cc.ekblad.toml.configuration/-toml-serializer-configurator/index.html","searchKeys":["TomlSerializerConfigurator","class TomlSerializerConfigurator","cc.ekblad.toml.configuration.TomlSerializerConfigurator"]},{"name":"data class AccessError(val name: String, val tomlName: String, val cause: Throwable?) : TomlException","description":"cc.ekblad.toml.model.TomlException.AccessError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-access-error/index.html","searchKeys":["AccessError","data class AccessError(val name: String, val tomlName: String, val cause: Throwable?) : TomlException","cc.ekblad.toml.model.TomlException.AccessError"]},{"name":"data class Bool(val value: Boolean) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.Bool","location":"4koma/cc.ekblad.toml.model/-toml-value/-bool/index.html","searchKeys":["Bool","data class Bool(val value: Boolean) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.Bool"]},{"name":"data class Double(val value: Double) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.Double","location":"4koma/cc.ekblad.toml.model/-toml-value/-double/index.html","searchKeys":["Double","data class Double(val value: Double) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.Double"]},{"name":"data class Integer(val value: Long) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.Integer","location":"4koma/cc.ekblad.toml.model/-toml-value/-integer/index.html","searchKeys":["Integer","data class Integer(val value: Long) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.Integer"]},{"name":"data class List(val elements: List<TomlValue>) : TomlValue","description":"cc.ekblad.toml.model.TomlValue.List","location":"4koma/cc.ekblad.toml.model/-toml-value/-list/index.html","searchKeys":["List","data class List(val elements: List<TomlValue>) : TomlValue","cc.ekblad.toml.model.TomlValue.List"]},{"name":"data class LocalDate(val value: LocalDate) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.LocalDate","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-date/index.html","searchKeys":["LocalDate","data class LocalDate(val value: LocalDate) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.LocalDate"]},{"name":"data class LocalDateTime(val value: LocalDateTime) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.LocalDateTime","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-date-time/index.html","searchKeys":["LocalDateTime","data class LocalDateTime(val value: LocalDateTime) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.LocalDateTime"]},{"name":"data class LocalTime(val value: LocalTime) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.LocalTime","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-time/index.html","searchKeys":["LocalTime","data class LocalTime(val value: LocalTime) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.LocalTime"]},{"name":"data class Map(val properties: Map<String, TomlValue>) : TomlValue","description":"cc.ekblad.toml.model.TomlValue.Map","location":"4koma/cc.ekblad.toml.model/-toml-value/-map/index.html","searchKeys":["Map","data class Map(val properties: Map<String, TomlValue>) : TomlValue","cc.ekblad.toml.model.TomlValue.Map"]},{"name":"data class OffsetDateTime(val value: OffsetDateTime) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.OffsetDateTime","location":"4koma/cc.ekblad.toml.model/-toml-value/-offset-date-time/index.html","searchKeys":["OffsetDateTime","data class OffsetDateTime(val value: OffsetDateTime) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.OffsetDateTime"]},{"name":"data class ParseError(val errorDescription: String, val line: Int, val cause: Throwable?) : TomlException","description":"cc.ekblad.toml.model.TomlException.ParseError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/index.html","searchKeys":["ParseError","data class ParseError(val errorDescription: String, val line: Int, val cause: Throwable?) : TomlException","cc.ekblad.toml.model.TomlException.ParseError"]},{"name":"data class String(val value: String) : TomlValue.Primitive","description":"cc.ekblad.toml.model.TomlValue.String","location":"4koma/cc.ekblad.toml.model/-toml-value/-string/index.html","searchKeys":["String","data class String(val value: String) : TomlValue.Primitive","cc.ekblad.toml.model.TomlValue.String"]},{"name":"enum CollectionSyntax : Enum<CollectionSyntax> ","description":"cc.ekblad.toml.serialization.CollectionSyntax","location":"4koma/cc.ekblad.toml.serialization/-collection-syntax/index.html","searchKeys":["CollectionSyntax","enum CollectionSyntax : Enum<CollectionSyntax> ","cc.ekblad.toml.serialization.CollectionSyntax"]},{"name":"enum InlineListMode : Enum<InlineListMode> ","description":"cc.ekblad.toml.serialization.InlineListMode","location":"4koma/cc.ekblad.toml.serialization/-inline-list-mode/index.html","searchKeys":["InlineListMode","enum InlineListMode : Enum<InlineListMode> ","cc.ekblad.toml.serialization.InlineListMode"]},{"name":"fun <T : Any> decoder(kClass: KClass<T>, decoder: TomlDecoder.(targetType: KType, tomlValue: TomlValue) -> Any?)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.decoder","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/decoder.html","searchKeys":["decoder","fun <T : Any> decoder(kClass: KClass<T>, decoder: TomlDecoder.(targetType: KType, tomlValue: TomlValue) -> Any?)","cc.ekblad.toml.configuration.TomlMapperConfigurator.decoder"]},{"name":"fun <T : Any> default(defaultValue: T)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.default","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/default.html","searchKeys":["default","fun <T : Any> default(defaultValue: T)","cc.ekblad.toml.configuration.TomlMapperConfigurator.default"]},{"name":"fun <T : Any> delegate(kClass: KClass<T>, configurator: TomlMapperConfigurator)","description":"cc.ekblad.toml.TomlMapper.delegate","location":"4koma/cc.ekblad.toml/-toml-mapper/delegate.html","searchKeys":["delegate","fun <T : Any> delegate(kClass: KClass<T>, configurator: TomlMapperConfigurator)","cc.ekblad.toml.TomlMapper.delegate"]},{"name":"fun <T : Any> encoder(kClass: KClass<T>, encoder: TomlEncoder.(kotlinValue: Any) -> TomlValue)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.encoder","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/encoder.html","searchKeys":["encoder","fun <T : Any> encoder(kClass: KClass<T>, encoder: TomlEncoder.(kotlinValue: Any) -> TomlValue)","cc.ekblad.toml.configuration.TomlMapperConfigurator.encoder"]},{"name":"fun <T : Any> mapping(kClass: KClass<T>, mappings: List<Pair<TomlName, KotlinName>>)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.mapping","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/mapping.html","searchKeys":["mapping","fun <T : Any> mapping(kClass: KClass<T>, mappings: List<Pair<TomlName, KotlinName>>)","cc.ekblad.toml.configuration.TomlMapperConfigurator.mapping"]},{"name":"fun <T> TomlDecoder.decode(value: TomlValue, target: KType): T","description":"cc.ekblad.toml.transcoding.decode","location":"4koma/cc.ekblad.toml.transcoding/decode.html","searchKeys":["decode","fun <T> TomlDecoder.decode(value: TomlValue, target: KType): T","cc.ekblad.toml.transcoding.decode"]},{"name":"fun <T> TomlValue.get(mapper: TomlMapper, targetKType: KType, path: List<String>): T?","description":"cc.ekblad.toml.get","location":"4koma/cc.ekblad.toml/get.html","searchKeys":["get","fun <T> TomlValue.get(mapper: TomlMapper, targetKType: KType, path: List<String>): T?","cc.ekblad.toml.get"]},{"name":"fun <T> decode(targetKType: KType, tomlValue: TomlValue): T","description":"cc.ekblad.toml.TomlMapper.decode","location":"4koma/cc.ekblad.toml/-toml-mapper/decode.html","searchKeys":["decode","fun <T> decode(targetKType: KType, tomlValue: TomlValue): T","cc.ekblad.toml.TomlMapper.decode"]},{"name":"fun <T> decode(targetKType: KType, tomlValue: TomlValue, defaultValue: T): T","description":"cc.ekblad.toml.TomlMapper.decode","location":"4koma/cc.ekblad.toml/-toml-mapper/decode.html","searchKeys":["decode","fun <T> decode(targetKType: KType, tomlValue: TomlValue, defaultValue: T): T","cc.ekblad.toml.TomlMapper.decode"]},{"name":"fun AccessError(name: String, tomlName: String, cause: Throwable?)","description":"cc.ekblad.toml.model.TomlException.AccessError.AccessError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-access-error/-access-error.html","searchKeys":["AccessError","fun AccessError(name: String, tomlName: String, cause: Throwable?)","cc.ekblad.toml.model.TomlException.AccessError.AccessError"]},{"name":"fun Bool(value: Boolean)","description":"cc.ekblad.toml.model.TomlValue.Bool.Bool","location":"4koma/cc.ekblad.toml.model/-toml-value/-bool/-bool.html","searchKeys":["Bool","fun Bool(value: Boolean)","cc.ekblad.toml.model.TomlValue.Bool.Bool"]},{"name":"fun Double(value: Double)","description":"cc.ekblad.toml.model.TomlValue.Double.Double","location":"4koma/cc.ekblad.toml.model/-toml-value/-double/-double.html","searchKeys":["Double","fun Double(value: Double)","cc.ekblad.toml.model.TomlValue.Double.Double"]},{"name":"fun IllegalListTargetType(tomlList: TomlValue.List, target: KType)","description":"cc.ekblad.toml.model.TomlException.DecodingError.IllegalListTargetType.IllegalListTargetType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-illegal-list-target-type/-illegal-list-target-type.html","searchKeys":["IllegalListTargetType","fun IllegalListTargetType(tomlList: TomlValue.List, target: KType)","cc.ekblad.toml.model.TomlException.DecodingError.IllegalListTargetType.IllegalListTargetType"]},{"name":"fun IllegalMapKeyType(tomlMap: TomlValue.Map, targetMapType: KType)","description":"cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapKeyType.IllegalMapKeyType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-illegal-map-key-type/-illegal-map-key-type.html","searchKeys":["IllegalMapKeyType","fun IllegalMapKeyType(tomlMap: TomlValue.Map, targetMapType: KType)","cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapKeyType.IllegalMapKeyType"]},{"name":"fun IllegalMapTargetType(tomlMap: TomlValue.Map, target: KType)","description":"cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapTargetType.IllegalMapTargetType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-illegal-map-target-type/-illegal-map-target-type.html","searchKeys":["IllegalMapTargetType","fun IllegalMapTargetType(tomlMap: TomlValue.Map, target: KType)","cc.ekblad.toml.model.TomlException.DecodingError.IllegalMapTargetType.IllegalMapTargetType"]},{"name":"fun Integer(value: Long)","description":"cc.ekblad.toml.model.TomlValue.Integer.Integer","location":"4koma/cc.ekblad.toml.model/-toml-value/-integer/-integer.html","searchKeys":["Integer","fun Integer(value: Long)","cc.ekblad.toml.model.TomlValue.Integer.Integer"]},{"name":"fun InvalidEnumValue(tomlString: TomlValue.String, targetType: KType)","description":"cc.ekblad.toml.model.TomlException.DecodingError.InvalidEnumValue.InvalidEnumValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-invalid-enum-value/-invalid-enum-value.html","searchKeys":["InvalidEnumValue","fun InvalidEnumValue(tomlString: TomlValue.String, targetType: KType)","cc.ekblad.toml.model.TomlException.DecodingError.InvalidEnumValue.InvalidEnumValue"]},{"name":"fun InvalidString(sourceValue: String, invalidChars: Set<Char>)","description":"cc.ekblad.toml.model.TomlException.SerializationError.InvalidString.InvalidString","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/-invalid-string/-invalid-string.html","searchKeys":["InvalidString","fun InvalidString(sourceValue: String, invalidChars: Set<Char>)","cc.ekblad.toml.model.TomlException.SerializationError.InvalidString.InvalidString"]},{"name":"fun LazyValueEvaluatedToNull(sourceValue: Lazy<*>)","description":"cc.ekblad.toml.model.TomlException.EncodingError.LazyValueEvaluatedToNull.LazyValueEvaluatedToNull","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/-lazy-value-evaluated-to-null/-lazy-value-evaluated-to-null.html","searchKeys":["LazyValueEvaluatedToNull","fun LazyValueEvaluatedToNull(sourceValue: Lazy<*>)","cc.ekblad.toml.model.TomlException.EncodingError.LazyValueEvaluatedToNull.LazyValueEvaluatedToNull"]},{"name":"fun List(elements: List<TomlValue>)","description":"cc.ekblad.toml.model.TomlValue.List.List","location":"4koma/cc.ekblad.toml.model/-toml-value/-list/-list.html","searchKeys":["List","fun List(elements: List<TomlValue>)","cc.ekblad.toml.model.TomlValue.List.List"]},{"name":"fun List(vararg values: TomlValue)","description":"cc.ekblad.toml.model.TomlValue.List.List","location":"4koma/cc.ekblad.toml.model/-toml-value/-list/-list.html","searchKeys":["List","fun List(vararg values: TomlValue)","cc.ekblad.toml.model.TomlValue.List.List"]},{"name":"fun LocalDate(value: LocalDate)","description":"cc.ekblad.toml.model.TomlValue.LocalDate.LocalDate","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-date/-local-date.html","searchKeys":["LocalDate","fun LocalDate(value: LocalDate)","cc.ekblad.toml.model.TomlValue.LocalDate.LocalDate"]},{"name":"fun LocalDateTime(value: LocalDateTime)","description":"cc.ekblad.toml.model.TomlValue.LocalDateTime.LocalDateTime","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-date-time/-local-date-time.html","searchKeys":["LocalDateTime","fun LocalDateTime(value: LocalDateTime)","cc.ekblad.toml.model.TomlValue.LocalDateTime.LocalDateTime"]},{"name":"fun LocalTime(value: LocalTime)","description":"cc.ekblad.toml.model.TomlValue.LocalTime.LocalTime","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-time/-local-time.html","searchKeys":["LocalTime","fun LocalTime(value: LocalTime)","cc.ekblad.toml.model.TomlValue.LocalTime.LocalTime"]},{"name":"fun Map(properties: Map<String, TomlValue>)","description":"cc.ekblad.toml.model.TomlValue.Map.Map","location":"4koma/cc.ekblad.toml.model/-toml-value/-map/-map.html","searchKeys":["Map","fun Map(properties: Map<String, TomlValue>)","cc.ekblad.toml.model.TomlValue.Map.Map"]},{"name":"fun Map(vararg entries: Pair<String, TomlValue>)","description":"cc.ekblad.toml.model.TomlValue.Map.Map","location":"4koma/cc.ekblad.toml.model/-toml-value/-map/-map.html","searchKeys":["Map","fun Map(vararg entries: Pair<String, TomlValue>)","cc.ekblad.toml.model.TomlValue.Map.Map"]},{"name":"fun MissingNonNullableValue(parameter: KParameter, tomlMap: TomlValue.Map, kType: KType)","description":"cc.ekblad.toml.model.TomlException.DecodingError.MissingNonNullableValue.MissingNonNullableValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-missing-non-nullable-value/-missing-non-nullable-value.html","searchKeys":["MissingNonNullableValue","fun MissingNonNullableValue(parameter: KParameter, tomlMap: TomlValue.Map, kType: KType)","cc.ekblad.toml.model.TomlException.DecodingError.MissingNonNullableValue.MissingNonNullableValue"]},{"name":"fun NoSuchDecoder(sourceValue: TomlValue, targetType: KType)","description":"cc.ekblad.toml.model.TomlException.DecodingError.NoSuchDecoder.NoSuchDecoder","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-no-such-decoder/-no-such-decoder.html","searchKeys":["NoSuchDecoder","fun NoSuchDecoder(sourceValue: TomlValue, targetType: KType)","cc.ekblad.toml.model.TomlException.DecodingError.NoSuchDecoder.NoSuchDecoder"]},{"name":"fun NoSuchEncoder(sourceValue: Any)","description":"cc.ekblad.toml.model.TomlException.EncodingError.NoSuchEncoder.NoSuchEncoder","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/-no-such-encoder/-no-such-encoder.html","searchKeys":["NoSuchEncoder","fun NoSuchEncoder(sourceValue: Any)","cc.ekblad.toml.model.TomlException.EncodingError.NoSuchEncoder.NoSuchEncoder"]},{"name":"fun NotAMap(sourceValue: Any, tomlValue: TomlValue)","description":"cc.ekblad.toml.model.TomlException.SerializationError.NotAMap.NotAMap","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/-not-a-map/-not-a-map.html","searchKeys":["NotAMap","fun NotAMap(sourceValue: Any, tomlValue: TomlValue)","cc.ekblad.toml.model.TomlException.SerializationError.NotAMap.NotAMap"]},{"name":"fun OffsetDateTime(value: OffsetDateTime)","description":"cc.ekblad.toml.model.TomlValue.OffsetDateTime.OffsetDateTime","location":"4koma/cc.ekblad.toml.model/-toml-value/-offset-date-time/-offset-date-time.html","searchKeys":["OffsetDateTime","fun OffsetDateTime(value: OffsetDateTime)","cc.ekblad.toml.model.TomlValue.OffsetDateTime.OffsetDateTime"]},{"name":"fun ParseError(errorDescription: String, line: Int)","description":"cc.ekblad.toml.model.TomlException.ParseError.ParseError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/-parse-error.html","searchKeys":["ParseError","fun ParseError(errorDescription: String, line: Int)","cc.ekblad.toml.model.TomlException.ParseError.ParseError"]},{"name":"fun ParseError(errorDescription: String, line: Int, cause: Throwable?)","description":"cc.ekblad.toml.model.TomlException.ParseError.ParseError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/-parse-error.html","searchKeys":["ParseError","fun ParseError(errorDescription: String, line: Int, cause: Throwable?)","cc.ekblad.toml.model.TomlException.ParseError.ParseError"]},{"name":"fun String(value: String)","description":"cc.ekblad.toml.model.TomlValue.String.String","location":"4koma/cc.ekblad.toml.model/-toml-value/-string/-string.html","searchKeys":["String","fun String(value: String)","cc.ekblad.toml.model.TomlValue.String.String"]},{"name":"fun TomlDocument.write(output: Appendable)","description":"cc.ekblad.toml.serialization.write","location":"4koma/cc.ekblad.toml.serialization/write.html","searchKeys":["write","fun TomlDocument.write(output: Appendable)","cc.ekblad.toml.serialization.write"]},{"name":"fun TomlDocument.write(outputStream: OutputStream)","description":"cc.ekblad.toml.serialization.write","location":"4koma/cc.ekblad.toml.serialization/write.html","searchKeys":["write","fun TomlDocument.write(outputStream: OutputStream)","cc.ekblad.toml.serialization.write"]},{"name":"fun TomlDocument.write(path: Path)","description":"cc.ekblad.toml.serialization.write","location":"4koma/cc.ekblad.toml.serialization/write.html","searchKeys":["write","fun TomlDocument.write(path: Path)","cc.ekblad.toml.serialization.write"]},{"name":"fun TomlEncoder.encode(value: Any): TomlValue","description":"cc.ekblad.toml.transcoding.encode","location":"4koma/cc.ekblad.toml.transcoding/encode.html","searchKeys":["encode","fun TomlEncoder.encode(value: Any): TomlValue","cc.ekblad.toml.transcoding.encode"]},{"name":"fun TomlMapper.atomicallyEncodeTo(path: Path, value: Any)","description":"cc.ekblad.toml.atomicallyEncodeTo","location":"4koma/cc.ekblad.toml/atomically-encode-to.html","searchKeys":["atomicallyEncodeTo","fun TomlMapper.atomicallyEncodeTo(path: Path, value: Any)","cc.ekblad.toml.atomicallyEncodeTo"]},{"name":"fun TomlMapper.encodeTo(output: Appendable, value: Any)","description":"cc.ekblad.toml.encodeTo","location":"4koma/cc.ekblad.toml/encode-to.html","searchKeys":["encodeTo","fun TomlMapper.encodeTo(output: Appendable, value: Any)","cc.ekblad.toml.encodeTo"]},{"name":"fun TomlMapper.encodeTo(outputStream: OutputStream, value: Any)","description":"cc.ekblad.toml.encodeTo","location":"4koma/cc.ekblad.toml/encode-to.html","searchKeys":["encodeTo","fun TomlMapper.encodeTo(outputStream: OutputStream, value: Any)","cc.ekblad.toml.encodeTo"]},{"name":"fun TomlMapper.encodeTo(path: Path, value: Any)","description":"cc.ekblad.toml.encodeTo","location":"4koma/cc.ekblad.toml/encode-to.html","searchKeys":["encodeTo","fun TomlMapper.encodeTo(path: Path, value: Any)","cc.ekblad.toml.encodeTo"]},{"name":"fun TomlMapper.encodeToDocument(value: Any): TomlDocument","description":"cc.ekblad.toml.encodeToDocument","location":"4koma/cc.ekblad.toml/encode-to-document.html","searchKeys":["encodeToDocument","fun TomlMapper.encodeToDocument(value: Any): TomlDocument","cc.ekblad.toml.encodeToDocument"]},{"name":"fun TomlMapper.encodeToString(value: Any): String","description":"cc.ekblad.toml.encodeToString","location":"4koma/cc.ekblad.toml/encode-to-string.html","searchKeys":["encodeToString","fun TomlMapper.encodeToString(value: Any): String","cc.ekblad.toml.encodeToString"]},{"name":"fun TomlValue.Companion.from(path: Path): TomlDocument","description":"cc.ekblad.toml.serialization.from","location":"4koma/cc.ekblad.toml.serialization/from.html","searchKeys":["from","fun TomlValue.Companion.from(path: Path): TomlDocument","cc.ekblad.toml.serialization.from"]},{"name":"fun TomlValue.Companion.from(stream: InputStream): TomlDocument","description":"cc.ekblad.toml.serialization.from","location":"4koma/cc.ekblad.toml.serialization/from.html","searchKeys":["from","fun TomlValue.Companion.from(stream: InputStream): TomlDocument","cc.ekblad.toml.serialization.from"]},{"name":"fun TomlValue.Companion.from(string: String): TomlDocument","description":"cc.ekblad.toml.serialization.from","location":"4koma/cc.ekblad.toml.serialization/from.html","searchKeys":["from","fun TomlValue.Companion.from(string: String): TomlDocument","cc.ekblad.toml.serialization.from"]},{"name":"fun encode(value: Any): TomlValue","description":"cc.ekblad.toml.TomlMapper.encode","location":"4koma/cc.ekblad.toml/-toml-mapper/encode.html","searchKeys":["encode","fun encode(value: Any): TomlValue","cc.ekblad.toml.TomlMapper.encode"]},{"name":"fun indentStep(spaces: Int)","description":"cc.ekblad.toml.configuration.TomlSerializerConfigurator.indentStep","location":"4koma/cc.ekblad.toml.configuration/-toml-serializer-configurator/indent-step.html","searchKeys":["indentStep","fun indentStep(spaces: Int)","cc.ekblad.toml.configuration.TomlSerializerConfigurator.indentStep"]},{"name":"fun inlineListMode(listMode: ListMode)","description":"cc.ekblad.toml.configuration.TomlSerializerConfigurator.inlineListMode","location":"4koma/cc.ekblad.toml.configuration/-toml-serializer-configurator/inline-list-mode.html","searchKeys":["inlineListMode","fun inlineListMode(listMode: ListMode)","cc.ekblad.toml.configuration.TomlSerializerConfigurator.inlineListMode"]},{"name":"fun pass(): Nothing","description":"cc.ekblad.toml.transcoding.TomlDecoder.pass","location":"4koma/cc.ekblad.toml.transcoding/-toml-decoder/pass.html","searchKeys":["pass","fun pass(): Nothing","cc.ekblad.toml.transcoding.TomlDecoder.pass"]},{"name":"fun pass(): Nothing","description":"cc.ekblad.toml.transcoding.TomlEncoder.pass","location":"4koma/cc.ekblad.toml.transcoding/-toml-encoder/pass.html","searchKeys":["pass","fun pass(): Nothing","cc.ekblad.toml.transcoding.TomlEncoder.pass"]},{"name":"fun preferListSyntax(syntax: CollectionSyntax)","description":"cc.ekblad.toml.configuration.TomlSerializerConfigurator.preferListSyntax","location":"4koma/cc.ekblad.toml.configuration/-toml-serializer-configurator/prefer-list-syntax.html","searchKeys":["preferListSyntax","fun preferListSyntax(syntax: CollectionSyntax)","cc.ekblad.toml.configuration.TomlSerializerConfigurator.preferListSyntax"]},{"name":"fun preferTableSyntax(syntax: CollectionSyntax)","description":"cc.ekblad.toml.configuration.TomlSerializerConfigurator.preferTableSyntax","location":"4koma/cc.ekblad.toml.configuration/-toml-serializer-configurator/prefer-table-syntax.html","searchKeys":["preferTableSyntax","fun preferTableSyntax(syntax: CollectionSyntax)","cc.ekblad.toml.configuration.TomlSerializerConfigurator.preferTableSyntax"]},{"name":"fun tomlMapper(baseMapper: TomlMapper, configuration: TomlMapperConfigurator.() -> Unit): TomlMapper","description":"cc.ekblad.toml.tomlMapper","location":"4koma/cc.ekblad.toml/toml-mapper.html","searchKeys":["tomlMapper","fun tomlMapper(baseMapper: TomlMapper, configuration: TomlMapperConfigurator.() -> Unit): TomlMapper","cc.ekblad.toml.tomlMapper"]},{"name":"fun tomlMapper(configuration: TomlMapperConfigurator.() -> Unit): TomlMapper","description":"cc.ekblad.toml.tomlMapper","location":"4koma/cc.ekblad.toml/toml-mapper.html","searchKeys":["tomlMapper","fun tomlMapper(configuration: TomlMapperConfigurator.() -> Unit): TomlMapper","cc.ekblad.toml.tomlMapper"]},{"name":"fun tomlSerializer(configuration: TomlSerializerConfigurator.() -> Unit): TomlSerializer","description":"cc.ekblad.toml.tomlSerializer","location":"4koma/cc.ekblad.toml/toml-serializer.html","searchKeys":["tomlSerializer","fun tomlSerializer(configuration: TomlSerializerConfigurator.() -> Unit): TomlSerializer","cc.ekblad.toml.tomlSerializer"]},{"name":"fun valueOf(value: String): CollectionSyntax","description":"cc.ekblad.toml.serialization.CollectionSyntax.valueOf","location":"4koma/cc.ekblad.toml.serialization/-collection-syntax/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CollectionSyntax","cc.ekblad.toml.serialization.CollectionSyntax.valueOf"]},{"name":"fun valueOf(value: String): InlineListMode","description":"cc.ekblad.toml.serialization.InlineListMode.valueOf","location":"4koma/cc.ekblad.toml.serialization/-inline-list-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): InlineListMode","cc.ekblad.toml.serialization.InlineListMode.valueOf"]},{"name":"fun values(): Array<CollectionSyntax>","description":"cc.ekblad.toml.serialization.CollectionSyntax.values","location":"4koma/cc.ekblad.toml.serialization/-collection-syntax/values.html","searchKeys":["values","fun values(): Array<CollectionSyntax>","cc.ekblad.toml.serialization.CollectionSyntax.values"]},{"name":"fun values(): Array<InlineListMode>","description":"cc.ekblad.toml.serialization.InlineListMode.values","location":"4koma/cc.ekblad.toml.serialization/-inline-list-mode/values.html","searchKeys":["values","fun values(): Array<InlineListMode>","cc.ekblad.toml.serialization.InlineListMode.values"]},{"name":"fun write(tomlDocument: TomlDocument, output: Appendable)","description":"cc.ekblad.toml.TomlSerializer.write","location":"4koma/cc.ekblad.toml/-toml-serializer/write.html","searchKeys":["write","fun write(tomlDocument: TomlDocument, output: Appendable)","cc.ekblad.toml.TomlSerializer.write"]},{"name":"fun write(tomlDocument: TomlDocument, outputStream: OutputStream)","description":"cc.ekblad.toml.TomlSerializer.write","location":"4koma/cc.ekblad.toml/-toml-serializer/write.html","searchKeys":["write","fun write(tomlDocument: TomlDocument, outputStream: OutputStream)","cc.ekblad.toml.TomlSerializer.write"]},{"name":"fun write(tomlDocument: TomlDocument, path: Path)","description":"cc.ekblad.toml.TomlSerializer.write","location":"4koma/cc.ekblad.toml/-toml-serializer/write.html","searchKeys":["write","fun write(tomlDocument: TomlDocument, path: Path)","cc.ekblad.toml.TomlSerializer.write"]},{"name":"inline fun <T : Any> TomlMapperConfigurator.delegate(mapper: TomlMapper)","description":"cc.ekblad.toml.delegate","location":"4koma/cc.ekblad.toml/delegate.html","searchKeys":["delegate","inline fun <T : Any> TomlMapperConfigurator.delegate(mapper: TomlMapper)","cc.ekblad.toml.delegate"]},{"name":"inline fun <T : Any> TomlValue.get(mapper: TomlMapper, vararg path: String): T?","description":"cc.ekblad.toml.get","location":"4koma/cc.ekblad.toml/get.html","searchKeys":["get","inline fun <T : Any> TomlValue.get(mapper: TomlMapper, vararg path: String): T?","cc.ekblad.toml.get"]},{"name":"inline fun <T : Any> encoder(noinline encoder: TomlEncoder.(kotlinValue: T) -> TomlValue)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.encoder","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/encoder.html","searchKeys":["encoder","inline fun <T : Any> encoder(noinline encoder: TomlEncoder.(kotlinValue: T) -> TomlValue)","cc.ekblad.toml.configuration.TomlMapperConfigurator.encoder"]},{"name":"inline fun <T : Any> mapping(vararg mappings: Pair<TomlName, KotlinName>)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.mapping","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/mapping.html","searchKeys":["mapping","inline fun <T : Any> mapping(vararg mappings: Pair<TomlName, KotlinName>)","cc.ekblad.toml.configuration.TomlMapperConfigurator.mapping"]},{"name":"inline fun <T : TomlValue, R : Any> decoder(crossinline decoder: TomlDecoder.(tomlValue: T) -> R?)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.decoder","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/decoder.html","searchKeys":["decoder","inline fun <T : TomlValue, R : Any> decoder(crossinline decoder: TomlDecoder.(tomlValue: T) -> R?)","cc.ekblad.toml.configuration.TomlMapperConfigurator.decoder"]},{"name":"inline fun <T : TomlValue, R : Any> decoder(noinline decoder: TomlDecoder.(targetType: KType, tomlValue: T) -> R?)","description":"cc.ekblad.toml.configuration.TomlMapperConfigurator.decoder","location":"4koma/cc.ekblad.toml.configuration/-toml-mapper-configurator/decoder.html","searchKeys":["decoder","inline fun <T : TomlValue, R : Any> decoder(noinline decoder: TomlDecoder.(targetType: KType, tomlValue: T) -> R?)","cc.ekblad.toml.configuration.TomlMapperConfigurator.decoder"]},{"name":"inline fun <T> TomlMapper.decode(path: Path): T","description":"cc.ekblad.toml.decode","location":"4koma/cc.ekblad.toml/decode.html","searchKeys":["decode","inline fun <T> TomlMapper.decode(path: Path): T","cc.ekblad.toml.decode"]},{"name":"inline fun <T> TomlMapper.decode(stream: InputStream): T","description":"cc.ekblad.toml.decode","location":"4koma/cc.ekblad.toml/decode.html","searchKeys":["decode","inline fun <T> TomlMapper.decode(stream: InputStream): T","cc.ekblad.toml.decode"]},{"name":"inline fun <T> TomlMapper.decode(string: String): T","description":"cc.ekblad.toml.decode","location":"4koma/cc.ekblad.toml/decode.html","searchKeys":["decode","inline fun <T> TomlMapper.decode(string: String): T","cc.ekblad.toml.decode"]},{"name":"inline fun <T> TomlMapper.decodeWithDefaults(defaultValue: T, path: Path): T","description":"cc.ekblad.toml.decodeWithDefaults","location":"4koma/cc.ekblad.toml/decode-with-defaults.html","searchKeys":["decodeWithDefaults","inline fun <T> TomlMapper.decodeWithDefaults(defaultValue: T, path: Path): T","cc.ekblad.toml.decodeWithDefaults"]},{"name":"inline fun <T> TomlMapper.decodeWithDefaults(defaultValue: T, stream: InputStream): T","description":"cc.ekblad.toml.decodeWithDefaults","location":"4koma/cc.ekblad.toml/decode-with-defaults.html","searchKeys":["decodeWithDefaults","inline fun <T> TomlMapper.decodeWithDefaults(defaultValue: T, stream: InputStream): T","cc.ekblad.toml.decodeWithDefaults"]},{"name":"inline fun <T> TomlMapper.decodeWithDefaults(defaultValue: T, string: String): T","description":"cc.ekblad.toml.decodeWithDefaults","location":"4koma/cc.ekblad.toml/decode-with-defaults.html","searchKeys":["decodeWithDefaults","inline fun <T> TomlMapper.decodeWithDefaults(defaultValue: T, string: String): T","cc.ekblad.toml.decodeWithDefaults"]},{"name":"inline fun <T> decode(tomlValue: TomlValue): T","description":"cc.ekblad.toml.TomlMapper.decode","location":"4koma/cc.ekblad.toml/-toml-mapper/decode.html","searchKeys":["decode","inline fun <T> decode(tomlValue: TomlValue): T","cc.ekblad.toml.TomlMapper.decode"]},{"name":"inline fun <T> decodeWithDefaults(defaultValue: T, tomlValue: TomlValue): T","description":"cc.ekblad.toml.TomlMapper.decodeWithDefaults","location":"4koma/cc.ekblad.toml/-toml-mapper/decode-with-defaults.html","searchKeys":["decodeWithDefaults","inline fun <T> decodeWithDefaults(defaultValue: T, tomlValue: TomlValue): T","cc.ekblad.toml.TomlMapper.decodeWithDefaults"]},{"name":"object Companion","description":"cc.ekblad.toml.model.TomlValue.Companion","location":"4koma/cc.ekblad.toml.model/-toml-value/-companion/index.html","searchKeys":["Companion","object Companion","cc.ekblad.toml.model.TomlValue.Companion"]},{"name":"open override val cause: Throwable?","description":"cc.ekblad.toml.model.TomlException.AccessError.cause","location":"4koma/cc.ekblad.toml.model/-toml-exception/-access-error/cause.html","searchKeys":["cause","open override val cause: Throwable?","cc.ekblad.toml.model.TomlException.AccessError.cause"]},{"name":"open override val cause: Throwable?","description":"cc.ekblad.toml.model.TomlException.ParseError.cause","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/cause.html","searchKeys":["cause","open override val cause: Throwable?","cc.ekblad.toml.model.TomlException.ParseError.cause"]},{"name":"open override val message: String","description":"cc.ekblad.toml.model.TomlException.AccessError.message","location":"4koma/cc.ekblad.toml.model/-toml-exception/-access-error/message.html","searchKeys":["message","open override val message: String","cc.ekblad.toml.model.TomlException.AccessError.message"]},{"name":"open override val message: String","description":"cc.ekblad.toml.model.TomlException.DecodingError.message","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/message.html","searchKeys":["message","open override val message: String","cc.ekblad.toml.model.TomlException.DecodingError.message"]},{"name":"open override val message: String","description":"cc.ekblad.toml.model.TomlException.EncodingError.message","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/message.html","searchKeys":["message","open override val message: String","cc.ekblad.toml.model.TomlException.EncodingError.message"]},{"name":"open override val message: String","description":"cc.ekblad.toml.model.TomlException.ParseError.message","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/message.html","searchKeys":["message","open override val message: String","cc.ekblad.toml.model.TomlException.ParseError.message"]},{"name":"open override val message: String","description":"cc.ekblad.toml.model.TomlException.SerializationError.message","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/message.html","searchKeys":["message","open override val message: String","cc.ekblad.toml.model.TomlException.SerializationError.message"]},{"name":"operator fun TomlValue.get(vararg path: String): TomlValue?","description":"cc.ekblad.toml.get","location":"4koma/cc.ekblad.toml/get.html","searchKeys":["get","operator fun TomlValue.get(vararg path: String): TomlValue?","cc.ekblad.toml.get"]},{"name":"sealed class DecodingError : TomlException","description":"cc.ekblad.toml.model.TomlException.DecodingError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/index.html","searchKeys":["DecodingError","sealed class DecodingError : TomlException","cc.ekblad.toml.model.TomlException.DecodingError"]},{"name":"sealed class EncodingError : TomlException","description":"cc.ekblad.toml.model.TomlException.EncodingError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/index.html","searchKeys":["EncodingError","sealed class EncodingError : TomlException","cc.ekblad.toml.model.TomlException.EncodingError"]},{"name":"sealed class Primitive : TomlValue","description":"cc.ekblad.toml.model.TomlValue.Primitive","location":"4koma/cc.ekblad.toml.model/-toml-value/-primitive/index.html","searchKeys":["Primitive","sealed class Primitive : TomlValue","cc.ekblad.toml.model.TomlValue.Primitive"]},{"name":"sealed class SerializationError : TomlException","description":"cc.ekblad.toml.model.TomlException.SerializationError","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/index.html","searchKeys":["SerializationError","sealed class SerializationError : TomlException","cc.ekblad.toml.model.TomlException.SerializationError"]},{"name":"sealed class TomlException : RuntimeException","description":"cc.ekblad.toml.model.TomlException","location":"4koma/cc.ekblad.toml.model/-toml-exception/index.html","searchKeys":["TomlException","sealed class TomlException : RuntimeException","cc.ekblad.toml.model.TomlException"]},{"name":"sealed class TomlValue","description":"cc.ekblad.toml.model.TomlValue","location":"4koma/cc.ekblad.toml.model/-toml-value/index.html","searchKeys":["TomlValue","sealed class TomlValue","cc.ekblad.toml.model.TomlValue"]},{"name":"val elements: List<TomlValue>","description":"cc.ekblad.toml.model.TomlValue.List.elements","location":"4koma/cc.ekblad.toml.model/-toml-value/-list/elements.html","searchKeys":["elements","val elements: List<TomlValue>","cc.ekblad.toml.model.TomlValue.List.elements"]},{"name":"val errorDescription: String","description":"cc.ekblad.toml.model.TomlException.ParseError.errorDescription","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/error-description.html","searchKeys":["errorDescription","val errorDescription: String","cc.ekblad.toml.model.TomlException.ParseError.errorDescription"]},{"name":"val invalidChars: Set<Char>","description":"cc.ekblad.toml.model.TomlException.SerializationError.InvalidString.invalidChars","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/-invalid-string/invalid-chars.html","searchKeys":["invalidChars","val invalidChars: Set<Char>","cc.ekblad.toml.model.TomlException.SerializationError.InvalidString.invalidChars"]},{"name":"val line: Int","description":"cc.ekblad.toml.model.TomlException.ParseError.line","location":"4koma/cc.ekblad.toml.model/-toml-exception/-parse-error/line.html","searchKeys":["line","val line: Int","cc.ekblad.toml.model.TomlException.ParseError.line"]},{"name":"val name: String","description":"cc.ekblad.toml.model.TomlException.AccessError.name","location":"4koma/cc.ekblad.toml.model/-toml-exception/-access-error/name.html","searchKeys":["name","val name: String","cc.ekblad.toml.model.TomlException.AccessError.name"]},{"name":"val parameter: KParameter","description":"cc.ekblad.toml.model.TomlException.DecodingError.MissingNonNullableValue.parameter","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/-missing-non-nullable-value/parameter.html","searchKeys":["parameter","val parameter: KParameter","cc.ekblad.toml.model.TomlException.DecodingError.MissingNonNullableValue.parameter"]},{"name":"val properties: Map<String, TomlValue>","description":"cc.ekblad.toml.model.TomlValue.Map.properties","location":"4koma/cc.ekblad.toml.model/-toml-value/-map/properties.html","searchKeys":["properties","val properties: Map<String, TomlValue>","cc.ekblad.toml.model.TomlValue.Map.properties"]},{"name":"val reason: String","description":"cc.ekblad.toml.model.TomlException.DecodingError.reason","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/reason.html","searchKeys":["reason","val reason: String","cc.ekblad.toml.model.TomlException.DecodingError.reason"]},{"name":"val reason: String","description":"cc.ekblad.toml.model.TomlException.EncodingError.reason","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/reason.html","searchKeys":["reason","val reason: String","cc.ekblad.toml.model.TomlException.EncodingError.reason"]},{"name":"val sourceValue: Any","description":"cc.ekblad.toml.model.TomlException.EncodingError.sourceValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-encoding-error/source-value.html","searchKeys":["sourceValue","val sourceValue: Any","cc.ekblad.toml.model.TomlException.EncodingError.sourceValue"]},{"name":"val sourceValue: Any","description":"cc.ekblad.toml.model.TomlException.SerializationError.sourceValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/source-value.html","searchKeys":["sourceValue","val sourceValue: Any","cc.ekblad.toml.model.TomlException.SerializationError.sourceValue"]},{"name":"val sourceValue: TomlValue","description":"cc.ekblad.toml.model.TomlException.DecodingError.sourceValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/source-value.html","searchKeys":["sourceValue","val sourceValue: TomlValue","cc.ekblad.toml.model.TomlException.DecodingError.sourceValue"]},{"name":"val targetType: KType","description":"cc.ekblad.toml.model.TomlException.DecodingError.targetType","location":"4koma/cc.ekblad.toml.model/-toml-exception/-decoding-error/target-type.html","searchKeys":["targetType","val targetType: KType","cc.ekblad.toml.model.TomlException.DecodingError.targetType"]},{"name":"val tomlName: String","description":"cc.ekblad.toml.model.TomlException.AccessError.tomlName","location":"4koma/cc.ekblad.toml.model/-toml-exception/-access-error/toml-name.html","searchKeys":["tomlName","val tomlName: String","cc.ekblad.toml.model.TomlException.AccessError.tomlName"]},{"name":"val tomlValue: TomlValue","description":"cc.ekblad.toml.model.TomlException.SerializationError.NotAMap.tomlValue","location":"4koma/cc.ekblad.toml.model/-toml-exception/-serialization-error/-not-a-map/toml-value.html","searchKeys":["tomlValue","val tomlValue: TomlValue","cc.ekblad.toml.model.TomlException.SerializationError.NotAMap.tomlValue"]},{"name":"val value: Boolean","description":"cc.ekblad.toml.model.TomlValue.Bool.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-bool/value.html","searchKeys":["value","val value: Boolean","cc.ekblad.toml.model.TomlValue.Bool.value"]},{"name":"val value: Double","description":"cc.ekblad.toml.model.TomlValue.Double.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-double/value.html","searchKeys":["value","val value: Double","cc.ekblad.toml.model.TomlValue.Double.value"]},{"name":"val value: LocalDate","description":"cc.ekblad.toml.model.TomlValue.LocalDate.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-date/value.html","searchKeys":["value","val value: LocalDate","cc.ekblad.toml.model.TomlValue.LocalDate.value"]},{"name":"val value: LocalDateTime","description":"cc.ekblad.toml.model.TomlValue.LocalDateTime.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-date-time/value.html","searchKeys":["value","val value: LocalDateTime","cc.ekblad.toml.model.TomlValue.LocalDateTime.value"]},{"name":"val value: LocalTime","description":"cc.ekblad.toml.model.TomlValue.LocalTime.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-local-time/value.html","searchKeys":["value","val value: LocalTime","cc.ekblad.toml.model.TomlValue.LocalTime.value"]},{"name":"val value: Long","description":"cc.ekblad.toml.model.TomlValue.Integer.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-integer/value.html","searchKeys":["value","val value: Long","cc.ekblad.toml.model.TomlValue.Integer.value"]},{"name":"val value: OffsetDateTime","description":"cc.ekblad.toml.model.TomlValue.OffsetDateTime.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-offset-date-time/value.html","searchKeys":["value","val value: OffsetDateTime","cc.ekblad.toml.model.TomlValue.OffsetDateTime.value"]},{"name":"val value: String","description":"cc.ekblad.toml.model.TomlValue.String.value","location":"4koma/cc.ekblad.toml.model/-toml-value/-string/value.html","searchKeys":["value","val value: String","cc.ekblad.toml.model.TomlValue.String.value"]}]
